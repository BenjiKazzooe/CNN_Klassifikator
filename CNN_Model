import tensorflow as tf
import numpy as np
import struct
import matplotlib.pyplot as plt
import kagglehub  # Neu: Kaggle-Download
from tensorflow.keras.callbacks import EarlyStopping  

# *** Fashion-MNIST-Daten von Kaggle ***
print("Lade Fashion-MNIST-Daten von Kaggle herunter...")
path = kagglehub.dataset_download("zalando-research/fashionmnist")
print("Path to dataset files:", path)

def load_mnist_images(file_path):
    with open(file_path, 'rb') as f:
        magic, num_images, rows, cols = struct.unpack(">IIII", f.read(16))
        images = np.fromfile(f, dtype=np.uint8).reshape(num_images, rows, cols, 1)
    return images / 255.0  # Normalisieren auf [0, 1]

def load_mnist_labels(file_path):
    with open(file_path, 'rb') as f:
        magic, num_labels = struct.unpack(">II", f.read(8))
        labels = np.fromfile(f, dtype=np.uint8)
    return labels

# *** Anzeige von Testbildern ***
def show_predictions(model, test_images, test_labels, class_names, num_images=10):
    predictions = model.predict(test_images) 
    predicted_classes = np.argmax(predictions, axis=1) 
    true_classes = np.argmax(test_labels, axis=1)

    plt.figure(figsize=(15, 15))
    for i in range(num_images):
        plt.subplot(1, num_images, i + 1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(test_images[i].squeeze(), cmap=plt.cm.binary)
        color = "green" if predicted_classes[i] == true_classes[i] else "red"
        plt.xlabel(f"Pred: {class_names[predicted_classes[i]]}\nTrue: {class_names[true_classes[i]]}",
                   color=color)
    plt.show()

# *** Fehleranalyse (falsch klassifizierte Bilder) ***
def show_misclassified_images(model, test_images, test_labels, class_names, num_images=10):
    predictions = model.predict(test_images)
    predicted_classes = np.argmax(predictions, axis=1)
    true_classes = np.argmax(test_labels, axis=1)

    # Indizes der falsch klassifizierten Bilder finden
    misclassified_indices = np.where(predicted_classes != true_classes)[0]

    # Falls es weniger falsche Vorhersagen als num_images gibt, die Anzahl anpassen
    num_images = min(num_images, len(misclassified_indices))

    print(f"Zeige {num_images} falsch klassifizierte Bilder...")

    plt.figure(figsize=(15, 10))
    for i, index in enumerate(misclassified_indices[:num_images]):
        plt.subplot(2, num_images // 2, i + 1)
        plt.xticks([])
        plt.yticks([])
        plt.grid(False)
        plt.imshow(test_images[index].squeeze(), cmap=plt.cm.binary)
        plt.xlabel(f"Pred: {class_names[predicted_classes[index]]}\nTrue: {class_names[true_classes[index]]}",
                   color="red")  # Rot für falsche Vorhersagen
    plt.show()

# *** Klassenlabels für Fashion-MNIST ***
class_names = [
    "T-Shirt/Top", "Trouser", "Pullover", "Dress", "Coat", 
    "Sandal", "Shirt", "Sneaker", "Bag", "Ankle Boot"
]

# *** Pfade Kaggle-Download ***
train_images_path = f"{path}/train-images-idx3-ubyte"
train_labels_path = f"{path}/train-labels-idx1-ubyte"
test_images_path = f"{path}/t10k-images-idx3-ubyte"
test_labels_path = f"{path}/t10k-labels-idx1-ubyte"

# *** Trainings- und Testdaten ***
train_images = load_mnist_images(train_images_path)
train_labels = load_mnist_labels(train_labels_path)
test_images = load_mnist_images(test_images_path)
test_labels = load_mnist_labels(test_labels_path)

# Labels in One-Hot-Encoding konvertieren
train_labels_onehot = tf.keras.utils.to_categorical(train_labels, 10)
test_labels_onehot = tf.keras.utils.to_categorical(test_labels, 10)

# *** CNN-Modell ***
model = tf.keras.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D((2, 2)),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.5),
    tf.keras.layers.Dense(10, activation='softmax')
])

# Modellübersicht anzeigen
model.summary()

# *** Kompilieren des Modells ***
model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

# *** Training mit Early Stopping ***
early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)

model.fit(train_images, train_labels_onehot, 
          epochs=10,  
          batch_size=32, 
          validation_split=0.1, 
          callbacks=[early_stopping])

# *** Modell evaluieren ***
test_loss, test_accuracy = model.evaluate(test_images, test_labels_onehot, verbose=2)
print(f"Testgenauigkeit: {test_accuracy:.2f}")

# *** Testbilder mit Vorhersagen anzeigen ***
show_predictions(model, test_images, test_labels_onehot, class_names, num_images=10)

# *** Fehleranalyse: Falsch klassifizierte Bilder anzeigen ***
show_misclassified_images(model, test_images, test_labels_onehot, class_names, num_images=10)
